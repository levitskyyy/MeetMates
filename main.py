import logging
import asyncio
import random
import pymysql
from pymysql.cursors import DictCursor
import string
import emoji
import time
# aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions, callback_query
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiogram.utils.exceptions
from aiogram.types.message import ContentTypes
# –∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
import config
import markups as lev
from database import Dbworker, UserInfo
from aiocryptopay import AioCryptoPay, Networks

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = Dbworker()
profiledb = UserInfo()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="all_log.log", level=logging.INFO, format='%(asctime)s - %(levelname)s -%(message)s')
warning_log = logging.getLogger("warning_log")
warning_log.setLevel(logging.WARNING)

fh = logging.FileHandler("warning_log.log")

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)

warning_log.addHandler(fh)

crypto = AioCryptoPay(token=config.DONATE, network='https://pay.crypt.bot')
gamelist = dict()


# –ê–Ω—Ç–∏—Ñ–ª—É–¥
async def anti_flood(*args, **kwargs):
    pass


class Chating(StatesGroup):  # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    msg = State()
    donate = State()
    usernick = State()
    userlike = State()
    steamconnector = State()
    gamechooser = State()


# —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start

@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    start_text = [
        '<b>–ü—Ä–∏–≤–µ—Ç, –≤–æ–ª—á–æ–Ω–æ–∫! üê∫ </b>\n\n<i>MeetMates - –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –ø–æ–∏—Å–∫–µ —Ç–∏–º–º–µ–π—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –∏–≥—Ä—ã!</i>\n\n–ß—Ç–æ–±—ã –ø—Ä–µ—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É –≤–æ–ª—á–æ–Ω–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏. üòâ',
        '<b>–ü—Ä–∏–≤–µ—Ç, –≤–æ–ª—á–æ–Ω–æ–∫! üê∫ </b>\n\n<i>MeetMates - —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ª—é–±–∏—à—å!</i>\n\n–ß—Ç–æ–±—ã –ø—Ä–µ—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É –≤–æ–ª—á–æ–Ω–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏. üòâ',
        '<b>–ü—Ä–∏–≤–µ—Ç, –≤–æ–ª—á–æ–Ω–æ–∫! üê∫ </b>\n\n<i>MeetMates - —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –≤–æ–ª—á–æ–Ω–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã!</i>\n\n–ß—Ç–æ–±—ã –ø—Ä–µ—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É –≤–æ–ª—á–æ–Ω–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏. üòâ']
    hi_sticker = ['CAACAgIAAxkBAAEIGJdkDNP28kxsutxggNlK25dxUEsVXwACLiMAAmabGEuBY7fvxgPQky8E',
                  'CAACAgIAAxkBAAEIJfhkEeIs2CLNH73xOrynCxvCTvaN6AACtiUAAvh3GEtre9Hh2p7XKy8E',
                  'CAACAgIAAxkBAAEIJfpkEeI9nkpvypq2zqZj8NgB0unxwQACXCQAAvaEGUu8NmNITYHkSy8E',
                  'CAACAgIAAxkBAAEIVRhkIGyLCIIXW75dj1JiuODHQu-VWgACjyQAAmxaGUtQ--rb3igI8y8E']
    gamelist[message.from_user.id] = set()
    if not db.user_exists(message.from_user.id):  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        ref_id = int(message.get_args()) if message.get_args() and message.get_args().isdigit() else 0
        if ref_id != message.from_user.id:
            db.add_user(message.from_user.username, message.from_user.id)
            db.setting_referal_id(ref_id, message.from_user.id)
            try:
                await bot.send_message(ref_id,
                                       f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(-–ª–∞—Å—å) @{message.from_user.username}\n"
                                       f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 25 üîπ")
                db.add_count_refs(ref_id)
                db.add_count_msg_ref(ref_id)
            except:
                pass
        else:
            db.add_user(message.from_user.username, message.from_user.id)
            await bot.send_message(message.from_user.id,
                                   "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∞—Å, –µ—Å–ª–∏ —ç—Ç–æ –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞.")

    await state.finish()
    db.update_connect_with(None, db.select_connect_with(message.from_user.id))
    db.update_connect_with(None, message.from_user.id)
    if int(message.from_user.id) in profiledb.get_all_id_in_description():
        profiledb.user_id(message.from_user.id, yet_in_base=True)
    else:
        profiledb.user_id(message.from_user.id, yet_in_base=False)

    await bot.send_sticker(chat_id=message.chat.id,
                           sticker=random.choice(hi_sticker))
    await bot.send_message(message.chat.id,
                           f'{random.choice(start_text)}',
                           parse_mode='html', reply_markup=lev.mainMenu)
    if db.queue_exists(message.from_user.id):
        db.delete_from_queue(message.from_user.id)
        await bot.send_message(message.from_user.id, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.')


@dp.throttled(anti_flood, rate=1.5)
@dp.callback_query_handler(text="other", state='*')
async def other(message: types.Message):
    other_sticker = ['CAACAgIAAxkBAAEIVRRkIGxt4jJeDlig8I37gdGY5Y4PdAACVCYAAj-tGUtWODpA5fbkbi8E',
                     'CAACAgIAAxkBAAEIVRZkIGxzaHjjW69yl5YJDuptPITO9AACMCIAAiQqGEvksMEgNC_-9C8E']
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker=random.choice(other_sticker))
    await bot.send_message(message.from_user.id,
                           f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è —Å–µ–±—è –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.', reply_markup=lev.otherMenu)


@dp.throttled(anti_flood, rate=1)
@dp.callback_query_handler(text="donate", state="*")
async def passer(callback_query: types.CallbackQuery, state=FSMContext):
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id,
                           f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ TON –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å! üòâ \n\n –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ 0, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.',
                           reply_markup=lev.backMenu)
    await Chating.donate.set()


@dp.throttled(anti_flood, rate=0.7)
@dp.message_handler(content_types=ContentTypes.TEXT, state=Chating.donate)
async def donate1(message: types.message, state: FSMContext):
    invoice = await crypto.create_invoice(asset='TON', amount=message.text)
    await bot.send_message(message.from_user.id,
                           f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—á—ë—Ç–∞ –≤ {message.text} TON.\n\n' + invoice.pay_url,
                           reply_markup=lev.backMenu)
    if callback_query.data == "back":
        await state.finish()
        await start(callback_query.message, state)
        await callback_query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.callback_query_handler(text="back", state=Chating.donate)
@dp.callback_query_handler(text="back", state="*")
async def donate_back(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await state.finish()
    await start(callback_query.message, state)
    if db.queue_exists(user_id):
        db.delete_from_queue(user_id)
        await bot.send_message(user_id, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.')
    await callback_query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.throttled(anti_flood, rate=1)
@dp.callback_query_handler(text="settings", state="*")
async def settings(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –¥–ª—è —Å–µ–±—è –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é!',
                           reply_markup=lev.settingsMenu)


@dp.message_handler(commands=['sendall'])
async def sendall(message: types.Message):
    if message.from_user.id == 1181380861 or message.from_user.id == 630334547:
        text = message.text[9:]
        users = db.get_users()
        for row in users:
            try:
                await bot.send_message(row[0], text)
                print(f"–£—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {row}")
                if int(row[1]) != 1:
                    db.set_active(row[0], 1)
                    print("–£–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π!")
            except:
                db.set_active(row[0], 0)
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {row[0]} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π.")

        await bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")


@dp.throttled(anti_flood, rate=1)
@dp.callback_query_handler(text="search")
async def search(message: types.Message):
    try:
        if (not db.user_exists(message.from_user.id)):  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            db.add_user(message.from_user.username, message.from_user.id)  # –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—á–∫—É –¥–±

        await Chating.gamechooser.set()
        await bot.send_message(message.from_user.id,
                               '–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Ç–∏–º–º–µ–π—Ç–∞. –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –¥–∞–π –Ω–∞–º –∑–Ω–∞—Ç—å, –Ω–∞–∂–∞–≤ "–ì–æ—Ç–æ–≤–æ"üê∫',
                               reply_markup=lev.searchMenu)
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(text="rating")
@dp.throttled(anti_flood, rate=2)
async def ranked(message: types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ '''
    try:
        one = ['\n–ó–∞–¥—Ä–æ—Ç, —Ç–æ–ø 1 –≤—ã—Ñ–∞—Ä–º–∏–ª!\n', '\n–û–≥–æ! –í–æ—Ç —Ç–∞–∫ –¥–∞, –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ?\n', '\n–ü–æ–±–µ–¥–∞–∞–∞\n',
               '\n–ú–æ—â–Ω—ã–π –≤–æ–ª—á–æ–Ω–æ–∫\n']
        two = ['\n–ù–µ–ø–ª–æ—Ö–æ, –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ!\n', '\n–ù–µ–ø–ª–æ—Ö–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–∞–∫ –¥–ª—è –≤–æ–ª—á–æ–Ω–∫–∞..\n',
               '\n–û–≥–æ-–æ–≥–æ, –∫—Ç–æ-—Ç–æ —É –Ω–∞—Å –Ω–µ –≤—ã–ª–∞–∑–∏—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n', '\n–î–∞ –Ω—É, –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ? –ù–µ–ø–ª–æ—Ö–æ!\n']
        three = ['\n–¢—Ä–µ—Ç–µ–µ –º–µ—Å—Ç–æ.. –≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ –Ω–µ –ø–µ—Ä–≤–æ–µ, –Ω–æ –ø–æ–π–¥—ë—Ç!\n', '\n#–ì–æ–≤–æ—Ä–∏–ª–∞\n', '\n–ê–∫—Ç–∏–≤–Ω–∏—á–∞–µ—Ç...\n']
        four = ['\n4 –º–µ—Å—Ç–æ, —É—É—É, –º–æ–∂–Ω–æ –±—ã–ª–æ –∏ –ª—É—á—à–µ...\n', '\n–ú–æ–∂–µ—Ç –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–∞? –ù—É –ª–∞–¥–Ω–æ, —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ...\n',
                '\n–ù–µ–ø–ª–æ—Ö–æ, –Ω–µ–ø–ª–æ—Ö–æ...\n']
        five = ['\n–ó–∞—Ç–æ –≤ —Ç–æ–ø–µ!\n', '\n–ù—É.. 5 –º–µ—Å—Ç–æ...\n', '\n–ü–æ–π–¥—ë—Ç!\n', '\n–£—Ö—Ç—ã! –≠—Ç–æ 5 –º–µ—Å—Ç–æ???\n']
        final_top = ''
        top_count = 0
        for i in db.top_rating():
            top_count += 1
            if db.get_name_user(i) == None:
                rofl_list = [random.choice(one), random.choice(two), random.choice(three), random.choice(four),
                             random.choice(five)]
                final_top = final_top + str(top_count) + '. *–Ω–µ—Ç—É –Ω–∏–∫–∞*' + ' - ' + str(
                    db.get_count_all_msg(i)) + ' üí†' + rofl_list[top_count - 1] + '\n'
            else:
                rofl_list = [random.choice(one), random.choice(two), random.choice(three), random.choice(four),
                             random.choice(five)]
                final_top = final_top + str(top_count) + '. @' + str(db.get_name_user(i)) + ' - ' + str(
                    db.get_count_all_msg(i)) + ' üí†' + rofl_list[top_count - 1] + '\n'
        await bot.send_message(message.from_user.id,
                               f'–†–µ–π—Ç–∏–Ω–≥ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ª—á–æ–Ω–∫–æ–≤! üê∫\n\n{final_top}', reply_markup=lev.backMenu)
    except Exception as e:
        warning_log.warning(e)


back_message = ["–í–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                "–î–æ–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å, –∞ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏!",
                "–ù–µ–ª—å–∑—è –≤—ã—Ö–æ–¥–∏—Ç—å, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å!",
                "–î–æ–¥–µ–ª–∞–π, –∞ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏."]


@dp.throttled(anti_flood, rate=2)
@dp.callback_query_handler(text="eprofile", state="*")
async def nicknamesetter(query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    await bot.send_message(query.from_user.id, '–ù–∞—á–Ω—ë–º! –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –Ω–æ—Å–∏—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µüëª',
                           reply_markup=lev.backMenu)
    if query.data == '-':
        await Chating.usernick.set()
    else:
        await Chating.usernick.set()


@dp.throttled(anti_flood, rate=2)
@dp.callback_query_handler(text="refka", state="*")
async def refkainfo(query: types.CallbackQuery, state: FSMContext):
    result = profiledb.user_selector_refs(query.from_user.id)
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    await bot.send_message(query.from_user.id,
                           f'üí† –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞, –ø–æ–ª—É—á–∏–≤ –∑–∞ —ç—Ç–æ –¥–æ–ø. –±–æ–Ω—É—Å—ã!\n\n'
                           f'–í–∞—à–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: https://t.me/MeetMates_bot?start={query.from_user.id}\n'
                           f'–í–∞—à–µ –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {result["refs"]}', reply_markup=lev.backMenu)


@dp.throttled(anti_flood, rate=0.7)
@dp.message_handler(content_types=ContentTypes.TEXT, state=Chating.usernick)
async def nicknamesetter(message: types.message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.send_message(message.from_user.id,
                           '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è. –ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –∏—Ö –ø–∏—Å–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫: "-"',
                           reply_markup=lev.backMenu)
    if message.text == '-':
        await Chating.userlike.set()
    else:
        await Chating.userlike.set()
        await profiledb.user_nick(message.from_user.id, message.text)


@dp.throttled(anti_flood, rate=0.7)
@dp.message_handler(content_types=ContentTypes.TEXT, state=Chating.userlike)
async def likessetter(message: types.message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.send_message(message.from_user.id,
                           '–ö–ª–∞—Å—Å! –ê —Å–µ–π—á–∞—Å –º–æ–∂–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π —Å—Ç–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∫ –ø—Ä–æ—Ñ–∏–ª—é –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ',
                           reply_markup=lev.backMenu)
    if message.text == '-':
        await Chating.userlike.set()
    else:
        await Chating.steamconnector.set()
        await profiledb.user_likes(message.from_user.id, message.text)


@dp.throttled(anti_flood, rate=0.7)
@dp.message_handler(content_types=ContentTypes.TEXT, state=Chating.steamconnector)
async def steamsetter(message: types.message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.send_message(message.from_user.id, '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤!', reply_markup=lev.backMenu)
    await state.finish()
    await profiledb.steam_link(message.text, message.from_user.id)


@dp.throttled(anti_flood, rate=1)
@dp.callback_query_handler(text="profile", state="*")
async def view_profile(message: types.Message):
    result = profiledb.user_selector(message.from_user.id)
    result1 = profiledb.user_selector_refs(message.from_user.id)
    await bot.send_message(message.from_user.id, f'‚Äî –ü—Ä–æ—Ñ–∏–ª—å ‚Äî\n'
                                                 f'üîπ –ù–∏–∫–Ω–µ–π–º: {result["user_nick"] if result["user_nick"] != "" else "-"}\n'
                                                 f'üîπ –£–≤–ª–µ—á–µ–Ω–∏—è: {result["user_like"] if result["user_like"] != "" else "-"}\n'
                                                 f'üîπ –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {result1["refs"]}\n'
                                                 f'üîπ –°—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ: {result["user_status"] if result["user_status"] != "" else "-"}\n'
                                                 f'üîπ Steam: {result["steamlink"] if result["steamlink"] != "" else "-"}\n'
                                                 f'‚Äî 1/1 ‚Äî', reply_markup=lev.backMenu)


@dp.throttled(anti_flood, rate=2)
@dp.callback_query_handler(text="info", state="*")
async def passer(message: types.Message):
    await bot.send_message(message.from_user.id, f'üîπ <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> üîπ\n\n'
                                                 f'–ö–æ–ª-–≤–æ –≤–æ–ª—á–∞—Ç: {int(db.count_user())}\n'
                                                 f'–ö–æ–ª-–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ª—á–∞—Ç: {int(db.count_deactive())}\n'
                                                 f'–ü–æ –ø–æ–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–æ–≤/–±–∞–≥–æ–≤: @ew2df\n', parse_mode='html')


@dp.throttled(anti_flood, rate=0.7)
@dp.callback_query_handler(
    lambda callback_query: callback_query.data in ['minecraft', 'csgo', 'dota', 'wot', 'rust', 'valorant', 'pubg'],
    state=Chating.gamechooser)
async def game_insert(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    chosen_game = callback_query.data

    async with state.proxy() as data:
        if "gamelist" not in data:
            data["gamelist"] = {chosen_game}
        else:
            result = {i for i in data["gamelist"]}
            result.add(chosen_game)
            data["gamelist"] = result

    await bot.answer_callback_query(callback_query.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É {chosen_game.capitalize()}")


@dp.throttled(anti_flood, rate=2)
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'done', state=Chating.gamechooser)
async def choose_game(callback_query: types.CallbackQuery, state: FSMContext):
    ''' –í—ã–±–æ—Ä –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ '''
    try:
        user_id = callback_query.from_user.id

        if db.queue_exists(user_id):
            db.delete_from_queue(user_id)

        selected_games = set()

        async with state.proxy() as data:
            if "gamelist" in data:
                selected_games = list(data.get("gamelist", set()))

        if not selected_games:
            current_state = await state.get_state()
            if current_state is not None and current_state == Chating.gamechooser:
                await bot.send_message(user_id, '–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É!', reply_markup=lev.searchMenu)
            return await state.reset_state()

        db.add_to_queue(user_id, list(selected_games))

        await bot.send_message(user_id, '–ò—â–µ–º –¥–ª—è –≤–∞—Å –≤–æ–ª—á–∞—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º..', reply_markup=lev.backMenu)

        while True:
            await asyncio.sleep(1)
            found_user = db.search(db.get_game_user(user_id), user_id)
            if found_user is not None:  # –µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —é–∑–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
                try:
                    db.update_connect_with(found_user, user_id)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å –∫–µ–º –æ–±—â–∞–µ—Ç—Å—è —é–∑–µ—Ä
                    db.update_connect_with(user_id, found_user)
                    break
                except Exception as e:
                    print(e)

        while True:
            await asyncio.sleep(1)
            connected_user = db.select_connect_with(user_id)
            if connected_user is not None:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω–µ–∫—Ç–∏–ª—Å—è
                await Chating.msg.set()
                break

        try:
            db.delete_from_queue(user_id)  # —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            db.delete_from_queue(connected_user)
        except:
            pass

        result1 = profiledb.user_selector(user_id)
        result2 = profiledb.user_selector(connected_user)
        result3 = profiledb.user_selector_refs(user_id)
        result4 = profiledb.user_selector_refs(connected_user)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        await bot.send_message(connected_user, f'‚Äî –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ‚Äî\n'
                                               f'üîπ –ù–∏–∫–Ω–µ–π–º: {result1["user_nick"] if result1["user_nick"] != "" else "-"}\n'
                                               f'üîπ –£–≤–ª–µ—á–µ–Ω–∏—è: {result1["user_like"] if result1["user_like"] != "" else "-"}\n'
                                               f'üîπ –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {result3["refs"]}\n'
                                               f'üîπ –°—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ: {result1["user_status"] if result1["user_status"] != "" else "-"}\n'
                                               f'üîπ Steam: {result1["steamlink"] if result1["steamlink"] != "" else "-"}\n'
                                               f'‚Äî 1/1 ‚Äî')

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞
        await bot.send_message(connected_user, '–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞–ª—Å—è!\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.',
                               reply_markup=lev.messageMenu)

        return None

    except Exception as e:
        warning_log.warning(e)


@dp.throttled(anti_flood, rate=0.7)
@dp.callback_query_handler(state='*')
async def chating(callback_query: types.CallbackQuery, state: FSMContext):
    ''' –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–µ—Å—Å–µ–¥–∂–∏–Ω–≥—É, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π'''
    try:
        if callback_query.data == 'share':
            if callback_query.from_user.username == None:
                await bot.send_message(db.select_connect_with_self(callback_query.from_user.id),
                                       '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –Ω–∏–∫–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞!')
            else:
                await bot.send_message(db.select_connect_with_self(callback_query.from_user.id),
                                       '@' + callback_query.from_user.username)
                await bot.send_message(callback_query.id, '@' + callback_query.from_user.username)

        elif callback_query.data == 'stop':
            await bot.send_message(callback_query.from_user.id, '–î–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!',
                                   reply_markup=lev.endMenu)
            await bot.send_message(db.select_connect_with(callback_query.from_user.id), '–î–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!',
                                   reply_markup=lev.endMenu)
            db.update_connect_with(None, db.select_connect_with(callback_query.from_user.id))
            db.update_connect_with(None, callback_query.from_user.id)

        elif callback_query.data == 'next':
            await choose_game(callback_query, state)

        elif callback_query.data == 'back':
            await start(callback_query, state)
            await state.finish()
            if db.queue_exists(callback_query.from_user.id):
                db.delete_from_queue(callback_query.from_user.id)
                await bot.send_message(callback_query.from_user.id, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.')

    except aiogram.utils.exceptions.ChatIdIsEmpty:
        await state.finish()
        await start(callback_query, state)
    except aiogram.utils.exceptions.BotBlocked:
        await bot.send_message(callback_query.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç –±–æ—Ç–∞!')
        await state.finish()
        await start(callback_query, state)
    except Exception as e:
        warning_log.warning(e)


@dp.throttled(anti_flood, rate=0.5)
@dp.message_handler(content_types=ContentTypes.TEXT, state=Chating.msg)
async def chating_text(message: types.Message, state: FSMContext):
    '''Function with messaging'''
    await state.update_data(msg=message.text)
    user_data = await state.get_data()
    try:
        await bot.send_message(db.select_connect_with(message.from_user.id), user_data['msg'])
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.log_msg(message.from_user.id, user_data['msg'])  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if random.randint(0, 100) < 10:
            db.add_count_msg(message.from_user.id)
        else:
            pass
    except Exception as a:
        warning_log.warning(a)


@dp.throttled(anti_flood, rate=0.5)
@dp.message_handler(content_types=ContentTypes.PHOTO, state=Chating.msg)
async def chating_photo(message: types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –≥–¥–µ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–±—â–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω –§–û–¢–û–ì–†–ê–§–ò–Ø–ú–ò '''
    try:
        await message.photo[-1].download('photo_user/' + str(message.from_user.id) + '.jpg')
        with open('photo_user/' + str(message.from_user.id) + '.jpg', 'rb') as photo:
            await bot.send_photo(db.select_connect_with(message.from_user.id), photo, caption=message.text)
    except Exception as e:
        warning_log.warning(e)


@dp.throttled(anti_flood, rate=2)
@dp.message_handler(content_types=ContentTypes.ANIMATION, state=Chating.msg)
async def chating_gif(message: types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ GIF '''
    try:
        await message.animation.download('gif_user/' + str(message.from_user.id) + '.gif')
        with open('gif_user/' + str(message.from_user.id) + '.gif', 'rb') as gif:
            await bot.send_animation(db.select_connect_with(message.from_user.id), gif, caption=message.caption)
    except Exception as e:
        warning_log.warning(e)


@dp.throttled(anti_flood, rate=2)
@dp.message_handler(content_types=ContentTypes.STICKER, state=Chating.msg)
async def chating_sticker(message: types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –≥–¥–µ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–±—â–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω C–¢–ò–ö–ï–†–ê–ú–ò '''
    try:
        await bot.send_sticker(db.select_connect_with(message.from_user.id), message.sticker.file_id)
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(content_types=ContentTypes.VOICE, state=Chating.msg)
async def chating_voice(message: types.Message, state: FSMContext):
    try:
        await bot.send_voice(db.select_connect_with(message.from_user.id), message.voice.file_id)
    except Exception as e:
        warning_log.warning(e)


@dp.throttled(anti_flood, rate=0.5)
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back')
async def back(message: types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã back '''
    user_id = callback_query.from_user.id
    await state.finish()
    if db.queue_exists(user_id):
        db.delete_from_queue(user_id)
        await bot.send_message(user_id, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.')
    await start(message, state)


# —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–º –∑–∞–ø—Ä–æ—Å–µ —é–∑–µ—Ä–∞

@dp.throttled(anti_flood, rate=1)
@dp.message_handler()
async def end(message: types.Message):
    '''–§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–º–æ–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'''
    await message.answer('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /start')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, )
